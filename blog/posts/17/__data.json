{"type":"data","nodes":[null,{"type":"data","data":[{"blog":1,"blogId":9,"blogContent":10},{"id":2,"title":3,"description":4,"createdAt":5,"approxTimeToRead":6,"coverImageUrl":7,"__typename":8},17,"The Timer Class","Today I wrote some C++ ","2016-05-05T09:40:00.000Z","PT1M","/store/48-my-personal-computing-setup/img.cover.jpeg","Blog","17","This semester, according to our syllabus, we have the 'Design and Analysis of Algorithms' subject. The theory classes contain core algorithmic topics like divide - and - conquer, greedy technique and dynamic programming and in labs, we solve problems using said techniques. Typically, schools and colleges use Turbo C++, distributed by Borland, which we run under an emulated environment like DOSBOX because of  the deprecation of MS-DOS and surge of the Windows NT line of Operating Systems. However, we should clearly not ignore the alternatives out there. We still have to code the solution for the old Turbo C++ compiler from the 90s. I have created a repo on GitHub for solutions to the different problems in our syllabus (for MS-DOS, NT  - Visual C++ Compiler and Linux - g++) We are supposed to implement the given problem using the appropriate technique and we are to monitor the order of growth of said algorithm. In DOS, we use a Timer class that is present in the Template Class Library. By default, the include folder does not reference the Template Class Library, but this can be done pretty easily using the Settings Tab in Turbo C++. The problem is that the Timer class runs only on DOS, so clearly we need a simple Timer Class Implementation for Linux and Visual C++. I have gone and done just that. My implementation provides minimal functionality\n\n1.  Starting a Timer\n2.  Stopping a Timer (Pause)\n3.  To Reset the Timer that makes it ready to use again\n4.  To return the time that passed between the function calls to start and stop\n\nThe Visual C++ contains classes in the std::chrono namespace which I've used in my Timer implementation for Windows. For Linux, we use the ctime header file and the clock function. The link to the repository: https://github.com/sauravMSFT/Design-Analysis-Algorithms In the next post, I'd like to talk about adding paths to the gcc and g++ environment variables on linux and maybe how to run gcc and g++ on Windows."],"uses":{"params":["blogId"]}}]}
