{"type":"data","nodes":[null,{"type":"data","data":[{"blog":1,"blogId":9,"blogContent":10},{"id":2,"title":3,"description":4,"createdAt":5,"approxTimeToRead":6,"coverImageUrl":7,"__typename":8},37,"Adonis V5: Writing your first custom provider!","From the past couple of days, I've been working with Adonis V5. In fact, this site's API is being written with Adonis V5. It's a really cool and feature-packed Framework for node...","2020-07-13T17:21:02.000Z","PT4M","/store/48-my-personal-computing-setup/img.cover.jpeg","Blog","37","From the past couple of days, I've been working with [Adonis V5](https://preview.adonisjs.com). In fact, this site's API is being written with Adonis V5. It's a really cool and feature-packed Framework for node. \n\n\u003C!--\n## TLDR\njust go \u003Ca href=\"#tldr\">here\u003C/a> üò¥\n-->\n\nWell, if you're reading this, there's a high likelyhood that you're pretty familiar with Adonis. Let's look at how to create a custom provider in Adonis V5. Throughout this post, I'll use this blogs API as an example, all the code for which is available here: [mrsauravsahu.github.io on Github](https://github.com/mrsauravsahu/mrsauravsahu.github.io). \n\nSo, for storing the actual blog files into a storage service, I'm using the temporary app directory. There's a `POST /blog-posts` API that takes a markdown file and writes it to the tmp directory, the basic implementation of which is here:\n\n```javascript\n...\npublic async upload({ request }: HttpContextContract) {\n    const file = request.file('file');\n\n    // generate a unique id for the file name\n    const fileId = uuid();\n    const filePath = `uploads/blog-posts/${fileId}.md`;\n\n    // save to tmp directory\n    await file?.move(Application.tmpPath(), { name:filePath })\n\n    const blogPostToAdd: Partial\u003CBlogPost> = {\n        file: filePath,\n        extension: 'md'\n    };\n\n    // add to db\n    const addedBlogPost = await BlogPost.create(blogPostToAdd)\n\n    return {\n        data: addedBlogPost\n    }\n}\n...\n```\n\nAs I'm writing this, just realised the above move operation should ideally be done by the `TmpFileProvider` ü§î (maybe I should refactor that later) well, back to the actual provider. Right, so in the download API - `GET /blog-posts/:id/file` we need to get the buffer back from the File System.\n\n\u003Ca name=\"tldr\">\u003C/a>\n## Steps to create a custom provider in Adonis V5\n\n1. Create your actual implementation, keeping one thing in mind - ‚ùå no external dependencies. So, for our example, it's as simple as the code below. (Follow TDD, I didn't this time, but don't tell anybody ü§´)\n\n```javascript\nimport { FileServiceConfig } from \"Contracts/service.file-service\";\nimport * as fs from 'fs';\nimport { promisify } from 'util';\nimport { join } from 'path';\n\nexport class FileService {\n  private config: FileServiceConfig;\n\n  constructor(config: FileServiceConfig) {\n    this.config = config;\n  }\n\n  async getBufferAsync(filePath: string): Promise\u003CBuffer> {\n    const fullFilePath = join(this.config.basePath, filePath);\n    const buffer = await promisify(fs.readFile)(fullFilePath);\n    return buffer;\n  }\n}\n```\n\n2. Create your provider\nUse the ace command `node ace make:provider TmpFileProvider` to create your provider. It should add the actual file and an entry in the providers section of the `.adonisrc.json` file.\n\n3. Setup your implementation in the register section of the provider. My service looks like it can be a singleton, so decided based on your needs. The provider now looks like this: \n\n```javascript\nexport default class TmpFileProvider {\n  constructor (protected container: IocContract) {\n  }\n\n  public register () {\n    // You should be getting the config from the config file\n    // but for this, let's keep this simple\n    this.container.singleton('providers/TmpFileProvider', () => {\n      const config: FileServiceConfig = { basePath: Application.tmpPath() }\n      return new FileService(config);\n    })\n  }\n\n  public async boot () {\n    // All bindings are ready, feel free to use them\n  }\n\n  public async ready () {\n    // App is ready\n  }\n\n  public async shutdown () {\n    // Cleanup, since app is going down\n  }\n}\n```\n\n4. Now when you use it in your controller, like so:\n\n```javascript\n...\npublic async download({ params, response }: HttpContextContract) {\n    // TODO: Clean this lel\n    const blogPostId: number = params.id;\n    const blogPost = await BlogPost.find(blogPostId);\n    // TODO: Use request validation for this\n    if (!blogPost) throw new Error('cannot find file');\n    const file = await TmpFileProvider.getBufferAsync(blogPost.file);\n\n    response.status(200);\n    response.type('application/octet-stream');\n    response.send(file);\n}\n...\n```\n\n5. Now when you start your server (or more likely try and hit the API multiple times thinking why it's not working) you'll get this error: \n\n```zsh\napp/Controllers/Http/BlogPostsController.ts:5:29 - error TS2307: Cannot find module '@ioc:providers/TmpFileProvider' or its corresponding type declarations.\n\nimport TmpFileProvider from '@ioc:providers/TmpFileProvider';\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n‚Ñπ  info      re-starting http server\n```\n\nWe need to add a type declaration telling TypeScript what that provider is returning, which is as simple as this:\n```javascript\n\ndeclare module '@ioc:providers/TmpFileProvider' {\n  import { FileService } from \"App/Services/FileService\";\n\n  const TmpFileProvider: FileService\n  export default TmpFileProvider\n}\n\n```\n\nYou're good to go!!! ‚ù§Ô∏è\n\nI'm having a lot of fun learning Adonis V5. If you love it too, let's connect on Twitter, or let's do it regardless. ü§∑‚Äç‚ôÇÔ∏è\n\n\\- [@mrsauravsahu on Twitter](https://twitter.com/mrsauravsahu)"],"uses":{"params":["blogId"]}}]}
